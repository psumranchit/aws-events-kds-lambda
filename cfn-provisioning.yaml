AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation Stack for Kinesis Data Stream Demo

Parameters:
  KdsShardsCount:
    Type: String
    Description: Specify Number of Shards

Resources:
  ### Create Data Stream ###
  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${AWS::StackName}
      ShardCount: !Ref KdsShardsCount
      StreamModeDetails:
        StreamMode: PROVISIONED

  ### Creating Data Producer Function that feed into Kinesis Data Stream ###
  ProducerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-producer'
      Environment:
        Variables:
          streamname: !Sub ${AWS::StackName}
      Code:
        ZipFile: !Sub |
          import datetime
          import json
          import random
          import boto3
          import time
          import string
          import os

          STREAM_NAME = os.environ['streamname']

          def lambda_handler(event, context):
              generate(STREAM_NAME, boto3.client('kinesis'))

          def get_data():
              return {
                  'EVENT_TIME': datetime.datetime.now().isoformat(),
                  'BRAND': random.choice(['Honda', 'Ford', 'Toyota', 'Tesla', 'Audi', 'BMW', 'Nissan', 'Mazda']),
                  'PLATE': random.choice(string.ascii_uppercase) + random.choice(string.ascii_uppercase) + '-' + str(round(random.random() * 1000)),
                  'SPEED': round(random.random() * 200, 2)}


          def generate(stream_name, kinesis_client):
              i = 1
              while i < 10:
                  data = get_data()
                  print(data)
                  time.sleep(0.1)
                  kinesis_client.put_record(
                      StreamName=stream_name,
                      Data=json.dumps(data),
                      PartitionKey="partitionkey")
                  i += 1
      MemorySize: 128
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt 'IamRoleProducerLambdaExecution.Arn'

  ### Role for producer function to put data into KDS ###
  IamRoleProducerLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      RoleName: !Sub '${AWS::StackName}-producer-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub "${AWS::StackName}-producer-policy"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-producer:*'
          - Effect: Allow
            Action: kinesis:*
            Resource:
            - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${AWS::StackName}'

  ### Creating Data Consumer Function trigger by Kinesis Data Stream ###
  ### This function just print decoded data to log ###
  ConsumerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-consumer'
      Code:
        ZipFile: !Sub |
          import base64

          def lambda_handler(event, context):
              for record in event["Records"]:
                  decoded_data = base64.b64decode(record["kinesis"]["data"]).decode("utf-8")
                  print(decoded_data)
      MemorySize: 128
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt 'IamRoleConsumerLambdaExecution.Arn'

  ### Adding KDS as trigger source for Consumer Function ###
  ConsumerLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      EventSourceArn: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${AWS::StackName}'
      FunctionName: !Ref ConsumerLambdaFunction
      StartingPosition: LATEST

  ### Role for Consumer Function to read data from the Stream ###
  IamRoleConsumerLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      RoleName: !Sub '${AWS::StackName}-consumer-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub "${AWS::StackName}-consumer-policy"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-consumer:*'
          - Effect: Allow
            Action:
            - kinesis:DescribeStream
            - kinesis:DescribeStreamSummary
            - kinesis:GetRecords
            - kinesis:GetShardIterator
            - kinesis:ListShards
            - kinesis:ListStreams
            - kinesis:SubscribeToShard
            Resource:
            - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${AWS::StackName}'

  ### EventBridge to trigger producer function every 2 mins to generate data into the Stream ###
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger Producer Function every 2 minutes
      Name: !Sub '${AWS::StackName}-rule'
      State: ENABLED
      ScheduleExpression: rate(2 minutes)
      Targets:
      - Arn: !GetAtt ProducerLambdaFunction.Arn
        Id: !Ref ProducerLambdaFunction

  ### Permission for EventBridge to invoke Producer Function ###
  IamRoleInvokeLambda:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      RoleName: !Sub '${AWS::StackName}-event-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub "${AWS::StackName}-event-policy"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource:
            - !GetAtt ProducerLambdaFunction.Arn

  ### Creating Lambda Invoke Permission ###
  ProducerLambdaTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProducerLambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}-rule'